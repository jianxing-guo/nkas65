commit 9758e7a00e37afa0104ffcb438c7cf0fe8867e85
Author: Marek 'marx' Grac <mgrac@redhat.com>
Date:   Sat Jul 14 16:37:21 2012 +0200

    Related: #834231 - Faster start of s-c-lvm
    
    Adding several caches in s-c-lvm, this saves us about 80-90% of forks

diff --git a/src/Filesystem.py b/src/Filesystem.py
index c7d9592..f72930d 100644
--- a/src/Filesystem.py
+++ b/src/Filesystem.py
@@ -26,14 +26,21 @@ FSRESIZE_FAILURE=_("Resize of filesystem failed. Command attempted: \"%s\" - Sys
 FSCHECK_FAILURE=_("Check of filesystem failed. Command attempted: \"%s\" - System Error Message: %s")
 FSUPGRADE_FAILURE=_("Upgrade of filesystem failed. Command attempted: \"%s\" - System Error Message: %s")
 gfs_types = {"1309":"gfs","1801":"gfs2"}
-
+cache_mountable_fs = { }
+cache_file_results = { }
+resize2fs_v139plus = None
 
 def get_fs(path):
     for fs in get_filesystems():
         if fs.probe(path):
             return fs
-    
-    result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+
+    if path not in cache_file_results:
+        result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+        cache_file_results[path] = result
+    else:
+        result = cache_file_results[path]
+        
     if re.search('FAT \(12 bit\)', result, re.I):
         return Unknown('vfat12')
     elif re.search('FAT \(16 bit\)', result, re.I):
@@ -105,9 +112,13 @@ class Filesystem:
     
     def set_clustered(self, clustered):
         return
-    
-    
+
     def check_mountable(self, fsname, module):
+        global cache_mountable_fs
+
+        if fsname in cache_mountable_fs:
+          return cache_mountable_fs[fsname]
+
         mountable = False
         out = execWithCapture('/bin/cat', ['/bin/cat', '/proc/filesystems'])
         if re.search(fsname, out, re.I):
@@ -116,6 +127,7 @@ class Filesystem:
             out, status = execWithCaptureStatus('/sbin/modprobe', ['/sbin/modprobe', '-n', module])
             if status == 0:
                 mountable = True
+        cache_mountable_fs[fsname] = mountable
         return mountable
     
     def check_path(self, path):
@@ -157,7 +169,12 @@ class ext4(Filesystem):
 
 
     def probe(self, path):
-        result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+        if path not in cache_file_results:
+            result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+            cache_file_results[path] = result
+        else:
+            result = cache_file_results[path]
+
         if re.search('ext4', result, re.I):
             return True
 
@@ -263,7 +280,12 @@ class ext3(Filesystem):
         
     
     def probe(self, path):
-        result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+        if path not in cache_file_results:
+            result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+            cache_file_results[path] = result
+        else:
+            result = cache_file_results[path]
+
         if re.search('ext3', result, re.I):
             return True
     
@@ -288,6 +310,8 @@ class ext3(Filesystem):
         if s != 0:
             raise CommandError('FATAL', FSRESIZE_FAILURE % (cmdstr, e))
     def __extend_online_cmd(self):
+        global resize2fs_v139plus;
+        
         # if ext2online is present, use it
         cmd = '/usr/sbin/ext2online'
         if self.check_path(cmd):
@@ -295,9 +319,15 @@ class ext3(Filesystem):
         # resize2fs 1.39 and above are also able to online extend ext3
         try:
             cmd = '/sbin/resize2fs'
+            if resize2fs_v139plus != None:
+                return (True, cmd)
+            
             o, e, s = execWithCaptureErrorStatus(cmd, [cmd])
-            if (s in [0, 1] and map(int, e.strip().split()[1].split('.')) >= [1, 39]):
+            if (s == 0 or s == 1) and float(e.strip().split()[1]) >= 1.39:
+                resize2fs_v139plus = True
                 return (True, cmd)
+            else:
+                resize2fs_v139plus = False
         except:
             pass
         return (False, None)
@@ -383,7 +413,12 @@ class ext2(Filesystem):
         
     
     def probe(self, path):
-        result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+        if path not in cache_file_results:
+            result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+            cache_file_results[path] = result
+        else:
+            result = cache_file_results[path]
+
         if re.search('ext2', result, re.I):
             return True
     
@@ -767,7 +802,12 @@ class xfs(Filesystem):
                             'xfs')
 
     def probe(self, path):
-        result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+        if path not in cache_file_results:
+            result = execWithCapture("/usr/bin/file", ['/usr/bin/file', '-s', '-L', path])
+            cache_file_results[path] = result
+        else:
+            result = cache_file_results[path]
+
         if re.search('SGI XFS', result, re.I):
             return True
 
diff --git a/src/utilities.py b/src/utilities.py
index 39525fd..454d476 100644
--- a/src/utilities.py
+++ b/src/utilities.py
@@ -1,9 +1,24 @@
 
 from execute import execWithCapture, execWithCaptureErrorStatus, execWithCaptureStatus
 
+cache_readlink_o = {}
+cache_readlink_s = {}
 
 def follow_links_to_target(path, paths=[]):
-    o, s = execWithCaptureStatus('/bin/readlink', ['/bin/readlink', '-e', path])
+    global cache_readlink_o
+    global cache_readlink_s
+    
+    if path.startswith("/") == False:
+        return None
+    
+    if path not in cache_readlink_s:
+      o, s = execWithCaptureStatus('/usr/bin/readlink', ['/usr/bin/readlink', '-e', path])
+      cache_readlink_o[path] = o
+      cache_readlink_s[path] = s
+    else:
+      s = cache_readlink_s[path]
+      o = cache_readlink_o[path]
+
     if s == 0:
         word = o.strip()
         
